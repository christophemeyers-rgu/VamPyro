using UnityEngine;
using UnityEngine.UI;
using System.Collections;

using UnityEngine.SceneManagement;


public class PlayerHealth : MonoBehaviour {

	/** Delay in seconds before restarting the level */
	public float restartLevelDelay = 1.0f;						

	/** Current health of the player */
	public  float currentHealth;

	/** Health regenerated by a fuel item */
	public float fuelHealthPickUp = 20f;


	/** Reference to the UI's health bar, visually displaying how much health the player has left */
	public Slider healthSlider;

	/** Reference to the UI's health text, indicating how much % of health is left to the player */
	public Text healthText;										

	/** Reference to an image that will flash red when the player takes damage */
	public Image damageImage;                                   

	/** Speed at which damageImage will fade*/
	public float fadeSpeed = 5f;

	/** Colour of damage image: Red but almost opaque */
	public Color flashColour = new Color(1f, 0f, 0f, 0.1f);    

	/** Sound to be played when player dies */
	public AudioClip deathClip;                                 

	/** Whether the player had died */
	public bool isDead;         

	/** Is true when the player is damaged */
	private bool tookDamage;


	/** Player's animator component */
	private Animator playerAnimator;
	/** Player's audio source component */
	private AudioSource playerAudio;
	/** Player's PlayerMovement script component*/
	private PlayerMovement playerMovement;  

	/** Reference to the PlayerDetection script of the DetectionSphere GameObject */
	private PlayerDetection playerDetection;



	/** Awake() is the first thing to be called, whether the script is enabled or not 
	 * => good for setting up references */
	void Awake ()
	{
		// Getting all the components
		playerAnimator = GetComponent <Animator> ();						
		playerAudio = GetComponent <AudioSource> ();			
		playerMovement = GetComponent <PlayerMovement> ();		
		playerDetection = GameObject.FindGameObjectWithTag("PlayerDetection").GetComponent<PlayerDetection>();

		// Starting health is set to 100
		currentHealth = 100f;
	}


	/** Update() will check if the player has just been damaged to make the screen flash appropriately. */
	void Update ()
	{
		// If the player just took damage... 
		if(tookDamage){
			// ... the damageImage will flash red.
			damageImage.color = flashColour;
		}

		// Otherwise...
		else{
			// ... transition the colour back to clear.
			damageImage.color = Color.Lerp (damageImage.color, Color.clear, fadeSpeed * Time.deltaTime);
		}


		// The image only flashes once, hence always reset this to false.
		tookDamage = false;
	}





	/** Updates the player's health.
	 * Takes parameters of
	 * - amount: can be positive or negative depending on whether player gains or loses health.
	 * - enemyAttack: triggers flashing damageImage and hurt sound effect.
	 * Will update currentHealth to the appropriate value between 0-100,
	 * set the HealthUI components and the radius of detection at which enemies will start chasing
	 * the player.
	 * Also calls Death() if the player's health drops to 0 for the first time.
	 */
	public void UpdateHealth(float amount, bool enemyAttack){

		// If health is being updated due to an enemy attack...
		if (enemyAttack) {
			//... initiate flashing screen in Update() and play the appropriate sound clip.
			tookDamage = true;	
			playerAudio.Play ();	
		}

		//Update the currentHealth
		currentHealth += amount;


		// Limit health to the 0-100 interval
		if (currentHealth > 100f) {
			currentHealth = 100f;
		} else if (currentHealth < 0) {
			currentHealth = 0;
		}

		// Update the UI and the radius at which players will start chasing the player
		healthSlider.value = currentHealth;
		healthText.text = currentHealth + "%";
		playerDetection.SetDetectionRadius ();


		// Once the player's health drops to 0 for the first time (i.e. isDead is still false)...
		if(currentHealth == 0 && !isDead)
		{
			// ... the player will die.
			Death ();
		}
	}




	/** Called when the player has lost all health. */ 
	void Death ()
	{
		// Avoid this function from being called again.
		isDead = true;

		// Start the "Die" Animation.
		playerAnimator.SetTrigger ("Die");

		// Set the audiosource to play the death clip and play it (this will stop the hurt sound from playing).
		playerAudio.clip = deathClip;
		playerAudio.Play ();

		// Turn off the movement script, so the player will not be moving around anymore after their death.
		playerMovement.enabled = false;

		// Start the GameOver() method of the GameManager and reload the scene at an appropriate time.
		GameManager.instance.GameOver ();
		Invoke ("Restart", 8.0f);
		enabled = false;
	}



	/** Made to be invoked after the player has died or called when the player has reached the exit of the maze */ 
	void Restart(){
		SceneManager.LoadScene (SceneManager.GetActiveScene().buildIndex);
	}



	/** Checks what the player collides with */
	void OnTriggerEnter(Collider other){

		// If the player has less than full health but is not dead yet and collides with a fuel pick up...
		if (other.gameObject.CompareTag ("FuelPickUp") && currentHealth < 100f && !isDead) {
			// ... the pick up is destroyed and health is updated.
			Destroy (other.gameObject);
			UpdateHealth (fuelHealthPickUp, false);
		} 

		// If the player is alive and collides with a key...
		else if (other.gameObject.CompareTag ("Key") && !isDead) {
			// ... the key is destroyed and the MazeGenerator opens up a corner.
			Destroy (other.gameObject);
			MazeGenerator.OpenUpCorner ();
		} 

		// If the player is alive and collides with a "Finish" tagged wall...
		else if (other.gameObject.CompareTag ("Finish") && !isDead) {
			// ... the scene is instantly reloaded and the script is disabled.
			Restart ();
			enabled = false;
		}
	}
		


}
